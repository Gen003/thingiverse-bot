import telegram
import requests
import asyncio
import os
import sys
import logging
from datetime import datetime, timedelta

# --- إعدادات السجلات (Logging) ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger('Thingiverse_Monitor')

# --- الإعدادات وقراءة المتغيرات ---
BOT_TOKEN = os.environ.get('BOT_TOKEN')
CHANNEL_ID = os.environ.get('CHANNEL_ID')
THINGIVERSE_APP_TOKEN = os.environ.get('APP_TOKEN')  # مفتاح API الخاص بـ Thingiverse

if not BOT_TOKEN or not CHANNEL_ID or not THINGIVERSE_APP_TOKEN:
    logger.critical("بيانات الاعتماد غير موجودة! تأكد من تعيين BOT_TOKEN, CHANNEL_ID و APP_TOKEN.")
    sys.exit(1)

SENT_LINKS_FILE = 'sent_links.txt'
bot = telegram.Bot(token=BOT_TOKEN)

# --- دوال مساعدة ---
def load_sent_links():
    try:
        if not os.path.exists(SENT_LINKS_FILE):
            return set()
        with open(SENT_LINKS_FILE, 'r', encoding='utf-8') as f:
            return set(line.strip() for line in f)
    except Exception as e:
        logger.error(f"خطأ في تحميل الروابط المرسلة: {e}")
        return set()

def save_sent_link(link):
    try:
        with open(SENT_LINKS_FILE, 'a', encoding='utf-8') as f:
            f.write(link + '\n')
    except Exception as e:
        logger.error(f"خطأ في حفظ الرابط: {e}")

# --- دالة الإرسال غير المتزامنة ---
async def send_to_telegram(item):
    try:
        # تحضير محتوى الرسالة
        message = (
            f"<b>🎯 تصميم جديد على Thingiverse!</b>\n\n"
            f"<b>🏷️ الاسم:</b> {item['name']}\n"
            f"<b>👤 المصمم:</b> {item['creator']['name']}\n"
            f"<b>📅 تاريخ النشر:</b> {item['added']}\n"
            f"<b>🔗 الرابط:</b> <a href='{item['public_url']}'>اضغط هنا للتحميل</a>"
        )
        
        # البحث عن صورة مناسبة (أول صورة في القائمة)
        image_url = None
        for image in item.get('images', []):
            if image.get('sizes') and image['sizes'][0].get('url'):
                image_url = image['sizes'][0]['url']
                break
        
        # إرسال الرسالة مع الصورة (أو بدونها)
        if image_url:
            await bot.send_photo(
                chat_id=CHANNEL_ID,
                photo=image_url,
                caption=message,
                parse_mode=telegram.ParseMode.HTML
            )
            logger.info(f"تم إرسال النموذج مع الصورة: {item['name']}")
        else:
            await bot.send_message(
                chat_id=CHANNEL_ID,
                text=message,
                parse_mode=telegram.ParseMode.HTML
            )
            logger.info(f"تم إرسال النموذج بدون صورة: {item['name']}")
            
        return True
        
    except Exception as e:
        logger.error(f"فشل إرسال النموذج: {e}")
        return False

# --- دالة جلب التصميمات الجديدة من Thingiverse API ---
async def fetch_new_models(sent_links):
    logger.info("جارٍ جلب التصميمات الجديدة من Thingiverse API...")
    try:
        # حساب وقت آخر تحديث (آخر 10 دقائق)
        last_check_time = datetime.utcnow() - timedelta(minutes=10)
        formatted_time = last_check_time.strftime('%Y-%m-%d %H:%M:%S')
        
        # إعداد طلب API
        url = f'https://api.thingiverse.com/search/?added_after={formatted_time}&type=things&sort=newest&per_page=20'
        headers = {
            'Authorization': f'Bearer {THINGIVERSE_APP_TOKEN}',
            'Accept': 'application/json'
        }
        
        # إرسال الطلب
        response = requests.get(url, headers=headers, timeout=25)
        
        # التحقق من نجاح الطلب
        if response.status_code != 200:
            logger.error(f"خطأ في API: {response.status_code} - {response.text}")
            return []
        
        # تحليل النتائج
        data = response.json()
        new_items = []
        
        for item in data.get('hits', []):
            # استبعاد التصميمات المرسلة سابقاً
            if item.get('public_url') and item['public_url'] not in sent_links:
                new_items.append(item)
        
        logger.info(f"تم العثور على {len(new_items)} تصميم جديد")
        return new_items
        
    except Exception as e:
        logger.error(f"فشل جلب التصميمات: {e}")
        return []

# --- الدورة الرئيسية ---
async def main():
    logger.info("--- بدء تشغيل بوت مراقبة Thingiverse ---")
    
    try:
        await bot.send_message(
            chat_id=CHANNEL_ID,
            text="🚀 بدأ البوت العمل بنجاح! جاري مراقبة التحديثات على Thingiverse..."
        )
    except Exception as e:
        logger.error(f"فشل إرسال رسالة البدء: {e}")

    sent_links = load_sent_links()
    logger.info(f"تم تحميل {len(sent_links)} رابط مرسل سابقاً")

    while True:
        try:
            # جلب التصميمات الجديدة
            new_models = await fetch_new_models(sent_links)
            
            # إرسال التصميمات الجديدة
            for model in new_models:
                if await send_to_telegram(model):
                    sent_links.add(model['public_url'])
                    save_sent_link(model['public_url'])
                    await asyncio.sleep(1)  # فاصل بين الرسائل
            
            # الانتظار للدورة القادمة
            interval = 300  # 5 دقائق
            logger.info(f"تم الانتهاء من الدورة - الانتظار {interval//60} دقائق")
            await asyncio.sleep(interval)
            
        except Exception as e:
            logger.error(f"خطأ في الدورة الرئيسية: {e}")
            await asyncio.sleep(60)  # انتظار قصير قبل إعادة المحاولة

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("تم إيقاف البوت يدويًا")
    except Exception as e:
        logger.critical(f"انهيار غير متوقع: {e}")